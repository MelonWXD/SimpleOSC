package com.dongua.simpleosc.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dongua.simpleosc.bean.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbID = new Property(0, Long.class, "dbID", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Gender = new Property(3, String.class, "gender", false, "GENDER");
        public final static Property Location = new Property(4, String.class, "location", false, "LOCATION");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
        public final static Property TweetCnt = new Property(8, int.class, "tweetCnt", false, "TWEET_CNT");
        public final static Property FavoriteCNt = new Property(9, int.class, "favoriteCNt", false, "FAVORITE_CNT");
        public final static Property FollowingCnt = new Property(10, int.class, "followingCnt", false, "FOLLOWING_CNT");
        public final static Property FollowerCnt = new Property(11, int.class, "followerCnt", false, "FOLLOWER_CNT");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: dbID
                "\"ID\" INTEGER NOT NULL UNIQUE ," + // 1: id
                "\"NAME\" TEXT," + // 2: name
                "\"GENDER\" TEXT," + // 3: gender
                "\"LOCATION\" TEXT," + // 4: location
                "\"AVATAR\" TEXT," + // 5: avatar
                "\"EMAIL\" TEXT," + // 6: email
                "\"URL\" TEXT," + // 7: url
                "\"TWEET_CNT\" INTEGER NOT NULL ," + // 8: tweetCnt
                "\"FAVORITE_CNT\" INTEGER NOT NULL ," + // 9: favoriteCNt
                "\"FOLLOWING_CNT\" INTEGER NOT NULL ," + // 10: followingCnt
                "\"FOLLOWER_CNT\" INTEGER NOT NULL );"); // 11: followerCnt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long dbID = entity.getDbID();
        if (dbID != null) {
            stmt.bindLong(1, dbID);
        }
        stmt.bindLong(2, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(4, gender);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
        stmt.bindLong(9, entity.getTweetCnt());
        stmt.bindLong(10, entity.getFavoriteCNt());
        stmt.bindLong(11, entity.getFollowingCnt());
        stmt.bindLong(12, entity.getFollowerCnt());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long dbID = entity.getDbID();
        if (dbID != null) {
            stmt.bindLong(1, dbID);
        }
        stmt.bindLong(2, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(4, gender);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
        stmt.bindLong(9, entity.getTweetCnt());
        stmt.bindLong(10, entity.getFavoriteCNt());
        stmt.bindLong(11, entity.getFollowingCnt());
        stmt.bindLong(12, entity.getFollowerCnt());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbID
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // location
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // url
            cursor.getInt(offset + 8), // tweetCnt
            cursor.getInt(offset + 9), // favoriteCNt
            cursor.getInt(offset + 10), // followingCnt
            cursor.getInt(offset + 11) // followerCnt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setDbID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTweetCnt(cursor.getInt(offset + 8));
        entity.setFavoriteCNt(cursor.getInt(offset + 9));
        entity.setFollowingCnt(cursor.getInt(offset + 10));
        entity.setFollowerCnt(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setDbID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getDbID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getDbID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
