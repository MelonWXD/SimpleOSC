package com.dongua.simpleosc.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dongua.simpleosc.bean.TweetBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TWEET_BEAN".
*/
public class TweetBeanDao extends AbstractDao<TweetBean, Long> {

    public static final String TABLENAME = "TWEET_BEAN";

    /**
     * Properties of entity TweetBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbID = new Property(0, Long.class, "dbID", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property PubDate = new Property(3, String.class, "pubDate", false, "PUB_DATE");
        public final static Property PubDateLong = new Property(4, long.class, "pubDateLong", false, "PUB_DATE_LONG");
        public final static Property Authorid = new Property(5, int.class, "authorid", false, "AUTHORID");
        public final static Property Portrait = new Property(6, String.class, "portrait", false, "PORTRAIT");
        public final static Property Body = new Property(7, String.class, "body", false, "BODY");
        public final static Property CommentCount = new Property(8, int.class, "commentCount", false, "COMMENT_COUNT");
        public final static Property ImgSmall = new Property(9, String.class, "imgSmall", false, "IMG_SMALL");
        public final static Property ImgBig = new Property(10, String.class, "imgBig", false, "IMG_BIG");
    }


    public TweetBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TweetBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TWEET_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: dbID
                "\"ID\" INTEGER NOT NULL UNIQUE ," + // 1: id
                "\"AUTHOR\" TEXT," + // 2: author
                "\"PUB_DATE\" TEXT," + // 3: pubDate
                "\"PUB_DATE_LONG\" INTEGER NOT NULL ," + // 4: pubDateLong
                "\"AUTHORID\" INTEGER NOT NULL ," + // 5: authorid
                "\"PORTRAIT\" TEXT," + // 6: portrait
                "\"BODY\" TEXT," + // 7: body
                "\"COMMENT_COUNT\" INTEGER NOT NULL ," + // 8: commentCount
                "\"IMG_SMALL\" TEXT," + // 9: imgSmall
                "\"IMG_BIG\" TEXT);"); // 10: imgBig
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TWEET_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TweetBean entity) {
        stmt.clearBindings();
 
        Long dbID = entity.getDbID();
        if (dbID != null) {
            stmt.bindLong(1, dbID);
        }
        stmt.bindLong(2, entity.getId());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindString(4, pubDate);
        }
        stmt.bindLong(5, entity.getPubDateLong());
        stmt.bindLong(6, entity.getAuthorid());
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(7, portrait);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(8, body);
        }
        stmt.bindLong(9, entity.getCommentCount());
 
        String imgSmall = entity.getImgSmall();
        if (imgSmall != null) {
            stmt.bindString(10, imgSmall);
        }
 
        String imgBig = entity.getImgBig();
        if (imgBig != null) {
            stmt.bindString(11, imgBig);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TweetBean entity) {
        stmt.clearBindings();
 
        Long dbID = entity.getDbID();
        if (dbID != null) {
            stmt.bindLong(1, dbID);
        }
        stmt.bindLong(2, entity.getId());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindString(4, pubDate);
        }
        stmt.bindLong(5, entity.getPubDateLong());
        stmt.bindLong(6, entity.getAuthorid());
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(7, portrait);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(8, body);
        }
        stmt.bindLong(9, entity.getCommentCount());
 
        String imgSmall = entity.getImgSmall();
        if (imgSmall != null) {
            stmt.bindString(10, imgSmall);
        }
 
        String imgBig = entity.getImgBig();
        if (imgBig != null) {
            stmt.bindString(11, imgBig);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TweetBean readEntity(Cursor cursor, int offset) {
        TweetBean entity = new TweetBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbID
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pubDate
            cursor.getLong(offset + 4), // pubDateLong
            cursor.getInt(offset + 5), // authorid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // portrait
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // body
            cursor.getInt(offset + 8), // commentCount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // imgSmall
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // imgBig
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TweetBean entity, int offset) {
        entity.setDbID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPubDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPubDateLong(cursor.getLong(offset + 4));
        entity.setAuthorid(cursor.getInt(offset + 5));
        entity.setPortrait(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBody(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCommentCount(cursor.getInt(offset + 8));
        entity.setImgSmall(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImgBig(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TweetBean entity, long rowId) {
        entity.setDbID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TweetBean entity) {
        if(entity != null) {
            return entity.getDbID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TweetBean entity) {
        return entity.getDbID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
