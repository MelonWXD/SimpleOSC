package com.dongua.simpleosc.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.List;

import com.dongua.simpleosc.bean.DetailUserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DETAIL_USER_BEAN".
*/
public class DetailUserBeanDao extends AbstractDao<DetailUserBean, Long> {

    public static final String TABLENAME = "DETAIL_USER_BEAN";

    /**
     * Properties of entity DetailUserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbID = new Property(0, Long.class, "dbID", true, "_id");
        public final static Property Uid = new Property(1, int.class, "uid", false, "UID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Gender = new Property(3, int.class, "gender", false, "GENDER");
        public final static Property Portrait = new Property(4, String.class, "portrait", false, "PORTRAIT");
        public final static Property City = new Property(5, String.class, "city", false, "CITY");
        public final static Property Province = new Property(6, String.class, "province", false, "PROVINCE");
        public final static Property Expertise = new Property(7, String.class, "expertise", false, "EXPERTISE");
        public final static Property Platforms = new Property(8, String.class, "platforms", false, "PLATFORMS");
        public final static Property JoinTime = new Property(9, String.class, "joinTime", false, "JOIN_TIME");
        public final static Property LastLoginTime = new Property(10, String.class, "lastLoginTime", false, "LAST_LOGIN_TIME");
        public final static Property FavoriteCount = new Property(11, int.class, "favoriteCount", false, "FAVORITE_COUNT");
        public final static Property FollowersCount = new Property(12, int.class, "followersCount", false, "FOLLOWERS_COUNT");
        public final static Property FansCount = new Property(13, int.class, "fansCount", false, "FANS_COUNT");
    }

    private final StringConverter expertiseConverter = new StringConverter();
    private final StringConverter platformsConverter = new StringConverter();

    public DetailUserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DetailUserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DETAIL_USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: dbID
                "\"UID\" INTEGER NOT NULL UNIQUE ," + // 1: uid
                "\"NAME\" TEXT," + // 2: name
                "\"GENDER\" INTEGER NOT NULL ," + // 3: gender
                "\"PORTRAIT\" TEXT," + // 4: portrait
                "\"CITY\" TEXT," + // 5: city
                "\"PROVINCE\" TEXT," + // 6: province
                "\"EXPERTISE\" TEXT," + // 7: expertise
                "\"PLATFORMS\" TEXT," + // 8: platforms
                "\"JOIN_TIME\" TEXT," + // 9: joinTime
                "\"LAST_LOGIN_TIME\" TEXT," + // 10: lastLoginTime
                "\"FAVORITE_COUNT\" INTEGER NOT NULL ," + // 11: favoriteCount
                "\"FOLLOWERS_COUNT\" INTEGER NOT NULL ," + // 12: followersCount
                "\"FANS_COUNT\" INTEGER NOT NULL );"); // 13: fansCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DETAIL_USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DetailUserBean entity) {
        stmt.clearBindings();
 
        Long dbID = entity.getDbID();
        if (dbID != null) {
            stmt.bindLong(1, dbID);
        }
        stmt.bindLong(2, entity.getUid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getGender());
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(5, portrait);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(7, province);
        }
 
        List expertise = entity.getExpertise();
        if (expertise != null) {
            stmt.bindString(8, expertiseConverter.convertToDatabaseValue(expertise));
        }
 
        List platforms = entity.getPlatforms();
        if (platforms != null) {
            stmt.bindString(9, platformsConverter.convertToDatabaseValue(platforms));
        }
 
        String joinTime = entity.getJoinTime();
        if (joinTime != null) {
            stmt.bindString(10, joinTime);
        }
 
        String lastLoginTime = entity.getLastLoginTime();
        if (lastLoginTime != null) {
            stmt.bindString(11, lastLoginTime);
        }
        stmt.bindLong(12, entity.getFavoriteCount());
        stmt.bindLong(13, entity.getFollowersCount());
        stmt.bindLong(14, entity.getFansCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DetailUserBean entity) {
        stmt.clearBindings();
 
        Long dbID = entity.getDbID();
        if (dbID != null) {
            stmt.bindLong(1, dbID);
        }
        stmt.bindLong(2, entity.getUid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getGender());
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(5, portrait);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(7, province);
        }
 
        List expertise = entity.getExpertise();
        if (expertise != null) {
            stmt.bindString(8, expertiseConverter.convertToDatabaseValue(expertise));
        }
 
        List platforms = entity.getPlatforms();
        if (platforms != null) {
            stmt.bindString(9, platformsConverter.convertToDatabaseValue(platforms));
        }
 
        String joinTime = entity.getJoinTime();
        if (joinTime != null) {
            stmt.bindString(10, joinTime);
        }
 
        String lastLoginTime = entity.getLastLoginTime();
        if (lastLoginTime != null) {
            stmt.bindString(11, lastLoginTime);
        }
        stmt.bindLong(12, entity.getFavoriteCount());
        stmt.bindLong(13, entity.getFollowersCount());
        stmt.bindLong(14, entity.getFansCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DetailUserBean readEntity(Cursor cursor, int offset) {
        DetailUserBean entity = new DetailUserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbID
            cursor.getInt(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // gender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // portrait
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // city
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // province
            cursor.isNull(offset + 7) ? null : expertiseConverter.convertToEntityProperty(cursor.getString(offset + 7)), // expertise
            cursor.isNull(offset + 8) ? null : platformsConverter.convertToEntityProperty(cursor.getString(offset + 8)), // platforms
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // joinTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lastLoginTime
            cursor.getInt(offset + 11), // favoriteCount
            cursor.getInt(offset + 12), // followersCount
            cursor.getInt(offset + 13) // fansCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DetailUserBean entity, int offset) {
        entity.setDbID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGender(cursor.getInt(offset + 3));
        entity.setPortrait(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProvince(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExpertise(cursor.isNull(offset + 7) ? null : expertiseConverter.convertToEntityProperty(cursor.getString(offset + 7)));
        entity.setPlatforms(cursor.isNull(offset + 8) ? null : platformsConverter.convertToEntityProperty(cursor.getString(offset + 8)));
        entity.setJoinTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLastLoginTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFavoriteCount(cursor.getInt(offset + 11));
        entity.setFollowersCount(cursor.getInt(offset + 12));
        entity.setFansCount(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DetailUserBean entity, long rowId) {
        entity.setDbID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DetailUserBean entity) {
        if(entity != null) {
            return entity.getDbID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DetailUserBean entity) {
        return entity.getDbID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
